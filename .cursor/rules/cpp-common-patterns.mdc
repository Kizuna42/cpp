---
globs: *.cpp,*.hpp
description: Common C++ patterns and best practices for 42 exercises
---

# Common C++ Patterns for 42 Exercises

## Header Guard Pattern

```cpp
#ifndef CLASSNAME_HPP
#define CLASSNAME_HPP

// class declaration

#endif
```

## Orthodox Canonical Form Pattern

```cpp
class MyClass {
private:
    // member variables

public:
    MyClass();                           // Default constructor
    MyClass(const MyClass& other);       // Copy constructor
    MyClass& operator=(const MyClass& other); // Assignment operator
    ~MyClass();                          // Destructor

    // other member functions
};
```

## Exception Class Pattern

```cpp
class MyException : public std::exception {
public:
    virtual const char* what() const throw() {
        return "Error message";
    }
};
```

## Template Class Pattern

```cpp
template<typename T>
class MyTemplate {
private:
    T* _data;
    size_t _size;

public:
    MyTemplate();
    MyTemplate(size_t size);
    MyTemplate(const MyTemplate& other);
    MyTemplate& operator=(const MyTemplate& other);
    ~MyTemplate();

    T& operator[](size_t index);
    const T& operator[](size_t index) const;
    size_t size() const;
};
```

## Virtual Function Pattern (Polymorphism)

```cpp
class Base {
public:
    virtual void doSomething() = 0;  // Pure virtual
    virtual ~Base();                 // Virtual destructor
};

class Derived : public Base {
public:
    void doSomething() override;     // Override implementation
};
```

## Static Member Pattern

```cpp
class MyClass {
private:
    static int _count;               // Static member variable

public:
    static int getCount();           // Static member function
};

// Definition in .cpp file
int MyClass::_count = 0;
int MyClass::getCount() { return _count; }
```
