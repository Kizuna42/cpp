/*
 * ====================================================================
 * CPP02 ex03: BSP - Binary Space Partitioning 実装解説版
 * ====================================================================
 * 
 * 【学習目標】
 * - 幾何学的アルゴリズムの実装
 * - Fixed型での精密数値計算
 * - 重心座標系（Barycentric coordinates）の理解
 * - 三角形内外判定の数学的原理
 * - 実用的な計算幾何学の応用
 * 
 * 【重要概念】
 * - BSP（Binary Space Partitioning）の基本原理
 * - 面積を使った内外判定
 * - 固定小数点演算での精度管理
 * - 境界条件の適切な処理
 */

#include "Point.hpp"

/*
 * ====================================================================
 * BSP 関数実装解説
 * ====================================================================
 */

/*
 * 【補助関数：三角形の面積計算】
 * 
 * Fixed triangleArea(Point const& p1, Point const& p2, Point const& p3)
 * 
 * 3点で形成される三角形の面積を計算：
 * 
 * 数学的原理：
 * Area = 0.5 * |x1(y2-y3) + x2(y3-y1) + x3(y1-y2)|
 * 
 * この公式は外積（cross product）から導出される：
 * - ベクトル (p2-p1) と (p3-p1) の外積の大きさの半分
 * - 符号付き面積として計算
 */
static Fixed triangleArea(Point const& p1, Point const& p2, Point const& p3) {
    /*
     * 座標値の取得
     */
    Fixed x1 = p1.getX();
    Fixed y1 = p1.getY();
    Fixed x2 = p2.getX();
    Fixed y2 = p2.getY();
    Fixed x3 = p3.getX();
    Fixed y3 = p3.getY();
    
    /*
     * 面積計算式の実装
     * 
     * 式: Area = 0.5 * |x1(y2-y3) + x2(y3-y1) + x3(y1-y2)|
     * 
     * 展開すると：
     * = 0.5 * |x1*y2 - x1*y3 + x2*y3 - x2*y1 + x3*y1 - x3*y2|
     */
    Fixed area = x1 * (y2 - y3) + x2 * (y3 - y1) + x3 * (y1 - y2);
    
    /*
     * 絶対値の取得
     * 
     * 面積は常に正の値である必要があるため：
     * - 符号付き面積から絶対値を計算
     * - Fixed型での絶対値処理
     */
    if (area < Fixed(0)) {
        area = area * Fixed(-1);  // 負の場合は正に変換
    }
    
    /*
     * 0.5 を掛けて実際の面積を計算
     */
    return area * Fixed(0.5f);
}

/*
 * ====================================================================
 * メインBSP関数の実装
 * ====================================================================
 */
bool bsp(Point const a, Point const b, Point const c, Point const point) {
    /*
     * 【BSPアルゴリズムの概要】
     * 
     * 重心座標系を使用した内外判定：
     * 
     * 1. 元の三角形ABCの面積を計算
     * 2. 点Pと各辺で形成される3つの三角形の面積を計算
     *    - △PAB, △PBC, △PCA
     * 3. 3つの小三角形の面積の合計が元の三角形の面積と等しい場合、
     *    点Pは三角形内部にある
     * 
     * 数学的原理：
     * - 点が三角形内部にある場合、3つの小三角形で完全に分割される
     * - 点が外部にある場合、面積の合計が元の面積より大きくなる
     */
    
    /*
     * ====================================================================
     * 元の三角形の面積計算
     * ====================================================================
     */
    
    /*
     * 三角形ABCの面積を計算
     */
    Fixed originalArea = triangleArea(a, b, c);
    
    /*
     * 退化した三角形のチェック
     * 
     * 面積が0の場合（3点が一直線上にある場合）：
     * - 有効な三角形ではない
     * - 内外判定は意味がない
     * - false を返す（外部として扱う）
     */
    if (originalArea == Fixed(0)) {
        return false;
    }
    
    /*
     * ====================================================================
     * 小三角形の面積計算
     * ====================================================================
     */
    
    /*
     * 三角形PABの面積
     * 
     * 点P、頂点A、頂点Bで形成される三角形：
     * - Pが内部にある場合、この三角形は元の三角形の一部
     * - Pが外部にある場合、この三角形は元の三角形と重複しない部分を含む
     */
    Fixed area1 = triangleArea(point, a, b);
    
    /*
     * 三角形PBCの面積
     * 
     * 点P、頂点B、頂点Cで形成される三角形
     */
    Fixed area2 = triangleArea(point, b, c);
    
    /*
     * 三角形PCAの面積
     * 
     * 点P、頂点C、頂点Aで形成される三角形
     */
    Fixed area3 = triangleArea(point, c, a);
    
    /*
     * ====================================================================
     * 内外判定の実行
     * ====================================================================
     */
    
    /*
     * 面積の合計を計算
     */
    Fixed totalSubArea = area1 + area2 + area3;
    
    /*
     * 判定条件の確認
     * 
     * 点が三角形内部にある条件：
     * totalSubArea == originalArea
     * 
     * 実装上の考慮事項：
     * - Fixed型の精度制限により完全一致は困難
     * - 小さな許容誤差を設定する場合もある
     * - ここでは厳密な等価判定を使用
     */
    if (totalSubArea == originalArea) {
        return true;   // 内部
    } else {
        return false;  // 外部
    }
    
    /*
     * ====================================================================
     * アルゴリズムの詳細解説
     * ====================================================================
     * 
     * 【なぜこのアルゴリズムが機能するのか？】
     * 
     * 数学的根拠：
     * 
     * 1. 点が内部にある場合
     *    - 3つの小三角形は重複なく元の三角形を完全に分割
     *    - 面積の合計 = 元の三角形の面積
     * 
     * 2. 点が外部にある場合
     *    - 一部の小三角形が元の三角形の外側に延びる
     *    - 面積の合計 > 元の三角形の面積
     * 
     * 3. 点が境界上にある場合
     *    - 1つ以上の小三角形の面積が0になる
     *    - 面積の合計 = 元の三角形の面積
     *    - この実装では境界は外部として扱う（厳密判定のため）
     * 
     * 【代替アルゴリズム】
     * 
     * 他の実装方法：
     * 1. 重心座標系での係数計算
     * 2. 外積による符号判定
     * 3. 距離ベースの判定
     * 
     * 面積ベースの利点：
     * - 理解しやすい
     * - 実装が比較的簡単
     * - 数値安定性が良い
     */
}

/*
 * ====================================================================
 * 数値精度とエラー処理の考慮
 * ====================================================================
 * 
 * 【Fixed型での計算精度】
 * 
 * 8.8固定小数点での制限：
 * - 最小精度：1/256 ≈ 0.0039
 * - 乗算での精度低下の可能性
 * - 累積誤差の影響
 * 
 * 【境界条件の処理】
 * 
 * 境界上の点の扱い：
 * - 数学的には境界は内部に含まない
 * - 実装では厳密等価判定を使用
 * - アプリケーションに応じて調整可能
 * 
 * より寛容な判定例：
 * ```cpp
 * Fixed epsilon(0.001f);  // 許容誤差
 * Fixed diff = totalSubArea - originalArea;
 * if (diff < epsilon && diff > Fixed(-1) * epsilon) {
 *     return true;  // 誤差範囲内なら内部とする
 * }
 * ```
 * 
 * 【パフォーマンス考慮】
 * 
 * 計算量：O(1)
 * - 3つの面積計算
 * - 各面積計算は定数時間
 * - 非常に高速なアルゴリズム
 * 
 * メモリ使用量：O(1)
 * - 追加のメモリ確保なし
 * - スタック変数のみ使用
 */

/*
 * ====================================================================
 * 実用例とテストケース
 * ====================================================================
 * 
 * 【典型的な使用例】
 * 
 * ```cpp
 * // 三角形の定義：(0,0), (4,0), (2,3)
 * Point a(0.0f, 0.0f);
 * Point b(4.0f, 0.0f);  
 * Point c(2.0f, 3.0f);
 * 
 * // テストケース1：明らかに内部
 * Point inside(2.0f, 1.0f);
 * bool result1 = bsp(a, b, c, inside);  // true
 * 
 * // テストケース2：明らかに外部
 * Point outside(5.0f, 5.0f);
 * bool result2 = bsp(a, b, c, outside); // false
 * 
 * // テストケース3：境界上（辺上）
 * Point onEdge(2.0f, 0.0f);  // AB辺の中点
 * bool result3 = bsp(a, b, c, onEdge);  // false（境界は外部）
 * 
 * // テストケース4：頂点上
 * Point onVertex(0.0f, 0.0f);  // 頂点A
 * bool result4 = bsp(a, b, c, onVertex); // false（頂点は外部）
 * ```
 * 
 * 【エッジケースの処理】
 * 
 * 1. 退化した三角形
 *    - 3点が一直線上
 *    - 面積が0
 *    - 常に false を返す
 * 
 * 2. 極小三角形
 *    - 面積が Fixed の精度限界付近
 *    - 計算誤差の影響大
 *    - 注意深い実装が必要
 * 
 * 3. 座標が範囲外
 *    - Fixed の表現範囲を超える座標
 *    - オーバーフロー/アンダーフローの処理
 *    - 事前の範囲チェックが望ましい
 */

/*
 * ====================================================================
 * 発展的な応用
 * ====================================================================
 * 
 * 【ゲーム開発での応用】
 * 
 * 衝突判定：
 * ```cpp
 * // プレイヤーが三角形の障害物内にいるかチェック
 * if (bsp(obstacle_a, obstacle_b, obstacle_c, player_pos)) {
 *     // 衝突処理
 *     handleCollision();
 * }
 * ```
 * 
 * UI要素のヒットテスト：
 * ```cpp
 * // 三角形ボタンのクリック判定
 * if (bsp(btn_p1, btn_p2, btn_p3, mouse_pos)) {
 *     // ボタンクリック処理
 *     onButtonClick();
 * }
 * ```
 * 
 * 【コンピュータグラフィックス】
 * 
 * レイトレーシング：
 * - 三角形メッシュとの交差判定
 * - レンダリングパイプラインでの基本要素
 * 
 * テクスチャマッピング：
 * - 三角形内の重心座標計算
 * - テクスチャ座標の補間
 * 
 * 【計算幾何学の応用】
 * 
 * 三角形分割（Triangulation）：
 * - 複雑な多角形の三角形分割
 * - Delaunay triangulation
 * 
 * 空間分割：
 * - BSP木の構築
 * - 空間検索の高速化
 */